spring.application.name=to-do-service
server.port=0

############################
## Eureka Configuration ##
############################
eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}
eureka.client.service-url.defaultZone=http://localhost:8761/eureka/
eureka.instance.hostname=localhost
eureka.instance.prefer-ip-address=true




######################
## DB CONFIGURATION ##
######################
spring.datasource.url=jdbc:mysql://localhost:3306/tododb
spring.datasource.username=root
spring.datasource.password=mysql

spring.jpa.hibernate.ddl-auto=none
spring.sql.init.mode=always


## Resource Server: Validacion de tokens JWT ##
# Sirve para que Spring valide que el token fue emitido por este servidor.
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:9000

logging.level.org.springframework.security=ERROR








#Si quieres usar resiliencia

##############################################
## Resilience4j - Circuit Breaker Configuración
##############################################

# Registra este circuito en el Actuator (/actuator/health) para monitorear su estado (CLOSED, OPEN, HALF_OPEN).
resilience4j.circuitbreaker.instances.recommendationService.register-health-indicator=true

# Define cómo se evaluarán las llamadas: 
# COUNT_BASED = por cantidad de llamadas (no por tiempo).
resilience4j.circuitbreaker.instances.recommendationService.sliding-window-type=COUNT_BASED

# Número de llamadas que se toman en cuenta para calcular la tasa de fallos.
# En este caso, analiza las últimas 5 invocaciones.
resilience4j.circuitbreaker.instances.recommendationService.sliding-window-size=5

# Porcentaje de fallos permitido antes de abrir el circuito.
# Si el 50% o más de las últimas 5 llamadas fallan, el circuito se abre (bloquea las llamadas).
resilience4j.circuitbreaker.instances.recommendationService.failure-rate-threshold=50

# Tiempo que el circuito permanecerá en estado OPEN antes de pasar a HALF_OPEN para probar nuevamente.
resilience4j.circuitbreaker.instances.recommendationService.wait-duration-in-open-state=10s

# Número de llamadas de prueba permitidas cuando el circuito está en HALF_OPEN.
# Si las 2 llamadas son exitosas, el circuito se cierra; si alguna falla, vuelve a OPEN.
resilience4j.circuitbreaker.instances.recommendationService.permitted-number-of-calls-in-half-open-state=2



###########################################
## Resilience4j - Retry (Reintentos)
###########################################

# Número máximo de intentos (1 ejecución + 2 reintentos = 3 en total).
# Aplica cuando una llamada falla por excepción temporal (como timeout o error de red).
resilience4j.retry.instances.recommendationService.max-attempts=3

# Tiempo de espera entre cada intento de reintento.
# Aquí espera 2 segundos antes de volver a intentar.
resilience4j.retry.instances.recommendationService.wait-duration=2s








##############################################
## Resilience4j - Circuit Breaker Configuración
##############################################

resilience4j.circuitbreaker.instances.recommendationService.register-health-indicator=true
resilience4j.circuitbreaker.instances.recommendationService.sliding-window-type=COUNT_BASED
#Mira las ultimas 5 llamadas al metodo
resilience4j.circuitbreaker.instances.recommendationService.sliding-window-size=5
#No tomes decisiones aun hasta que hayas observado al menos 3 llamadas
resilience4j.circuitbreaker.instances.recommendationService.minimum-number-of-calls=3
#De las 5 ultimas, 3 fallaron el 60 % fallo si supera el umbral (failure-rate-threshold), el circuito se abre
resilience4j.circuitbreaker.instances.recommendationService.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.recommendationService.wait-duration-in-open-state=10s
resilience4j.circuitbreaker.instances.recommendationService.permitted-number-of-calls-in-half-open-state=2

resilience4j.retry.instances.recommendationService.max-attempts=3
resilience4j.retry.instances.recommendationService.wait-duration=2s




